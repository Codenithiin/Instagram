// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid()) @map("_id")
  name     String
  email    String
  password String
  posts    Post[]    @relation("UserPosts")
  comments Comment[] @relation("UserComments")
  likes    Like[]    @relation("UserLikes")
}

model Post {
  id          String    @id @default(uuid()) @map("_id")
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[] @relation("PostComments")
  likes       Like[]    @relation("PostLikes")
}

model Comment {
  id        String   @id @default(uuid()) @map("_id")
  comment      String
  createdAt DateTime @default(now())
  userId    String
  postId    String
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  postId    String
  user      User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
